{"/home/travis/build/npmtest/node-npmtest-grunt-jsdoc/test.js":"/* istanbul instrument in package npmtest_grunt_jsdoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-jsdoc/lib.npmtest_grunt_jsdoc.js":"/* istanbul instrument in package npmtest_grunt_jsdoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_jsdoc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_jsdoc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-jsdoc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-jsdoc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_jsdoc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_jsdoc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_jsdoc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_jsdoc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_jsdoc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_jsdoc.__dirname + '/lib.npmtest_grunt_jsdoc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-jsdoc/node_modules/grunt-jsdoc/Gruntfile.js":"module.exports = function(grunt) {\n    'use strict';\n\n    require('load-grunt-tasks')(grunt);\n\n    // Project configuration.\n    grunt.initConfig({\n\n        clean: {\n            options: {\n                force : true\n            },\n            test: ['doc']\n        },\n\n        jsdoc: {\n            basic: {\n                src: ['tasks/**.js', 'tasks/lib/*.js'],\n                options: {\n                    destination: 'doc/basic'\n                }\n            },\n            alternate: {\n                src: ['tasks'],\n                dest : 'doc/alternate',\n                options: {\n                    readme : 'README.md',\n                    recurse : true,\n                    private : false\n                }\n            },\n            spacepack: {\n                src: ['tasks/**/*.js'],\n                options: {\n                    destination: 'doc/pack age',\n                    package: 'package.json'\n                }\n            },\n            docstrap: {\n                src: ['tasks/**.js', 'tasks/lib/*.js', 'README.md'],\n                options: {\n                    destination: 'doc/docstrap',\n                    template: 'node_modules/ink-docstrap/template',\n                    configure: 'node_modules/ink-docstrap/template/jsdoc.conf.json'\n                }\n            },\n            nosrc : {\n                options: {\n                    configure : 'test/nosrc.json'\n                }\n            }\n        },\n        nodeunit: {\n            unit:      ['test/jsdoc-plugin_test.js'],\n            basic:     ['test/jsdoc-basic_test.js'],\n            alternate: ['test/jsdoc-alternate_test.js'],\n            docstrap:  ['test/jsdoc-docstrap_test.js'],\n            spacepack: ['test/jsdoc-spacepack_test.js'],\n            nosrc: ['test/jsdoc-nosrc_test.js']\n        },\n\n        eslint: {\n            all: {\n                src: ['Gruntfile.js', 'tasks/**/*.js', 'test/**/*.js']\n            }\n        }\n    });\n\n    // Load local tasks.\n    grunt.loadTasks('tasks');\n\n\n    //testing tasks\n    grunt.registerTask('test-basic',     'Test basic jsdoc', ['jsdoc:basic', 'nodeunit:basic']);\n    grunt.registerTask('test-alternate', 'Test jsdoc with alternate options', ['jsdoc:alternate', 'nodeunit:alternate']);\n    grunt.registerTask('test-docstrap',  'Test jsdoc with a template', ['jsdoc:docstrap', 'nodeunit:docstrap']);\n    grunt.registerTask('test-spacepack', 'Test jsdoc with a package and spaces in the paths', ['jsdoc:spacepack', 'nodeunit:spacepack']);\n    grunt.registerTask('test-nosrc', 'Test jsdoc without src and dest, only a config', ['jsdoc:nosrc', 'nodeunit:nosrc']);\n    grunt.registerTask('test',           'Full test suite', ['clean:test', 'nodeunit:unit', 'test-basic', 'test-alternate', 'test-docstrap', 'test-spacepack', 'test-nosrc']);\n\n    grunt.registerTask('default', 'Default task will lint and test', ['eslint:all', 'test']);\n};\n\n","/home/travis/build/npmtest/node-npmtest-grunt-jsdoc/node_modules/grunt-jsdoc/tasks/jsdoc-plugin.js":"/**\n * @fileoverview This task helps you to run jsdoc3 to generate doc in your Grunt build sequence\n * @copyright Bertrand Chevrier 2012\n * @author Bertrand Chevrier <chevrier.bertrand@gmail.com>\n * @license MIT\n *\n * @module tasks/jsdoc-plugin\n */\n\nvar path = require('path');\nvar exec = require('./lib/exec');\n\n/**\n * Register the jsdoc task and helpers to Grunt\n * @type GruntTask\n * @constructor\n * @param {Object} grunt - the grunt context\n */\nmodule.exports = function jsDocTask(grunt) {\n    'use strict';\n\n    var errorCode = {\n        generic: 1,\n        task: 3\n    };\n\n    var jsdocFlags = ['access', 'configure', 'destination', 'debug', 'encoding', 'help', 'match', 'nocolor', 'private', 'package', 'pedantic', 'query', 'recurse', 'readme', 'template', 'test', 'tutorials', 'version', 'verbose', 'explain'];\n\n\n    //bind the task to the grunt context\n    grunt.registerMultiTask('jsdoc', 'Generates source documentation using jsdoc', function registerJsdocTask() {\n\n        var jsdoc,\n            child;\n        var params = {};\n        var done = this.async();\n        var options = this.options({\n            'ignoreWarnings': false,\n            'timeout': 60\n        });\n\n        var sources = this.filesSrc;\n        var jsdocPath = this.data.jsdoc;\n\n        if (!options.destination && this.files.length) {\n            // Support for old syntax where destination was provided through 'dest' key\n            options.destination = this.files[0].dest || 'doc';\n        }\n\n        //legacy configs\n        if (options.config) {\n            params.configure = options.config;\n        }\n\n        // Compute JSDoc flags from options\n        jsdocFlags.forEach(function(flag) {\n            if (typeof options[flag] !== 'undefined') {\n                params[flag] = options[flag];\n            }\n        });\n\n        if (jsdocPath && grunt.file.exists(jsdocPath) && grunt.file.isFile(jsdocPath)) {\n            //use the given jsdoc path if set\n            jsdoc = jsdocPath;\n        } else {\n            //lookup jsdoc\n            jsdoc = exec.lookup(grunt);\n        }\n\n        //check if jsdoc npm module is installed\n        if (jsdoc === undefined) {\n            grunt.log.error('Unable to locate jsdoc');\n            grunt.fail.warn('Wrong installation/environnement', errorCode.generic);\n        }\n\n        // convert jsdoc path to relative path\n        jsdoc = path.relative('.', jsdoc);\n\n        grunt.log.debug('Using jsdoc from : ' + jsdoc);\n\n        //check if there is sources to generate the doc for\n        if (sources.length === 0 && !params.configure) {\n            grunt.log.error('No source files defined');\n            grunt.fail.warn('Wrong configuration', errorCode.generic);\n        }\n\n\n        //check if jsdoc config file path is provided and does exist\n        if (params.configure && !grunt.file.exists(params.configure)) {\n            grunt.log.error('jsdoc config file path does not exist');\n            grunt.fail.warn('Wrong configuration', errorCode.generic);\n        }\n\n        if (params.destination && !grunt.file.exists(params.destination) && !params.configure) {\n            grunt.file.mkdir(options.destination);\n            grunt.log.debug('create destination : ' + options.destination);\n            if (!grunt.file.exists(params.destination)) {\n                grunt.log.error('unable to create documentation folder : ' + params.destination);\n                grunt.fail.warn('Wrong configuration', errorCode.generic);\n            }\n        }\n\n        //execution of the jsdoc command\n        grunt.event.emit('generating.jsdoc', jsdoc, sources, params);\n        child = exec.buildSpawned(grunt, jsdoc, sources, params);\n\n        child.stdout.on('data', grunt.log.debug);\n        child.stderr.on('data', function(data) {\n            grunt.log.debug(data);\n            if (!options.ignoreWarnings) {\n                grunt.log.error(data);\n            }\n        });\n        child.on('exit', function(code) {\n            var resolvedDest;\n            if (code === 0) {\n                if(options.destination){\n                    resolvedDest = path.resolve(options.destination);\n                    grunt.log.ok('Documentation generated to ' + resolvedDest);\n                } else {\n                    grunt.log.ok('Documentation generated');\n                }\n                grunt.event.emit('generated.jsdoc', resolvedDest);\n\n                done(true);\n            } else {\n                grunt.fail.warn('jsdoc terminated with a non-zero exit code', errorCode.task);\n                done();\n            }\n        });\n    });\n};\n\n","/home/travis/build/npmtest/node-npmtest-grunt-jsdoc/node_modules/grunt-jsdoc/tasks/lib/exec.js":"var path = require('path');\nvar spawn = require('cross-spawn');\n/**\n * Provides utility methods to execute a command\n * @module exec\n */\nmodule.exports = {\n\n    /**\n     * Build and execute a child process using the spawn function\n     * @param {Object} grunt - the grunt context\n     * @param {String} script - the script to run\n     * @param {Array} sources - the list of sources files\n     * @param {Object} params - the list of cli flags\n     * @return {ChildProcess} from the spawn\n     */\n    buildSpawned: function(grunt, script, sources, params) {\n\n        var flag;\n        var cmd = script;\n        var args =[];\n\n\n        // Compute JSDoc options\n        for (flag in params) {\n            if (params.hasOwnProperty(flag)) {\n                if (params[flag] !== false) {\n                    args.push('--' + flag);\n                }\n                if (typeof params[flag] === 'string') {\n                    args.push(params[flag]);\n                }\n            }\n        }\n\n        if (!Array.isArray(sources)) {\n            sources = [sources];\n        }\n        args = args.concat(sources);\n\n        grunt.log.debug('Running : ' + cmd + ' ' + args.join(' '));\n\n        return spawn(cmd, args);\n    },\n\n    /**\n     * Lookup file or path into node modules\n     * @param {Object} grunt - the grunt context\n     * @returns {String} the first matching resolved path or nothing if not found\n     */\n    lookup: function(grunt) {\n        var i, binPath, paths;\n        var nodePath = process.env.NODE_PATH || '';\n\n        //check first the base path into the cwd\n        paths = [\n            __dirname + '/../../node_modules/.bin/jsdoc',\n            __dirname + '/../../node_modules/jsdoc/jsdoc.js',\n            __dirname + '/../../../jsdoc/jsdoc.js'\n        ];\n\n        //fall back on global if not found at the usual location\n        nodePath.split(path.delimiter).forEach(function(p) {\n            if (!/\\/$/.test(p)) {\n                p += '/';\n            }\n            paths.push(p + '/jsdoc/jsdoc.js');\n        });\n\n        for (i in paths) {\n            binPath = path.resolve(paths[i]);\n            if (grunt.file.exists(binPath) && grunt.file.isFile(binPath)) {\n                return binPath;\n            }\n        }\n\n        return;\n    }\n};\n\n"}